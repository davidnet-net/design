import { writeFileSync } from 'fs';
import path from 'path';
import { execSync } from 'child_process';

function getGitInfo() {
  try {
    const fullCommitHash = execSync('git rev-parse HEAD').toString().trim();
    const shortCommitHash = fullCommitHash.slice(0, 7);
    const commitDate = execSync('git log -1 --format=%cI').toString().trim();
    const branch = execSync('git rev-parse --abbrev-ref HEAD').toString().trim();

    let commitUrl = '';
    try {
      const pkg = JSON.parse(readFileSync('package.json', 'utf-8'));
      if (pkg.repository?.url) {
        const repoUrl = pkg.repository.url
          .replace(/^git\+/, '')
          .replace(/\.git$/, '');
        commitUrl = `${repoUrl}/commit/${fullCommitHash}`;
      }
    } catch {
      // Ignore if package.json doesn't have repository info
    }

    return { fullCommitHash, shortCommitHash, commitDate, branch, commitUrl };
  } catch {
    return {
      fullCommitHash: 'unknown',
      shortCommitHash: 'unknown',
      commitDate: 'unknown',
      branch: 'unknown',
      commitUrl: '',
    };
  }
}

const gitInfo = getGitInfo();

const content = `//! This file is autogenerated! Edit in meta/scripts/GenerateMetaData.ts

export const metadata = {
  commitHash: "${gitInfo.shortCommitHash}",
  fullCommitHash: "${gitInfo.fullCommitHash}",
  commitDate: "${gitInfo.commitDate}",
  branch: "${gitInfo.branch}",
  commitUrl: "${gitInfo.commitUrl}"
};
`;

const outputPath = path.resolve('src/lib/metadata.ts');
writeFileSync(outputPath, content);

console.log(`âœ… Generated metadata.ts`);
